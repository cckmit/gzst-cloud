<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
      http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
      http://www.springframework.org/schema/context  
      http://www.springframework.org/schema/context/spring-context.xsd  
      http://www.springframework.org/schema/aop 
	  http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
      http://www.springframework.org/schema/mvc  
      http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

	<!-- 加载配置属性文件 -->
	<context:property-placeholder
		ignore-unresolvable="true"
		location="classpath:jeeweb.properties,classpath:upload.properties" />


	<!-- 配置使Spring采用CGLIB代理 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	<!-- 当在web.xml 中 DispatcherServlet使用 <url-pattern>/</url-pattern> 映射时，能映射静态资源 -->
	<mvc:default-servlet-handler />
	<!-- 静态资源映射 -->
	<mvc:resources location="/static/" mapping="/static/**" />
	<mvc:resources location="/upload/" mapping="/upload/**" />

	<!-- 静态资源访问，方案1 -->
	<!-- <mvc:resources location="/img/" mapping="/img/**" /> -->
	<!-- <mvc:resources location="/js/" mapping="/js/**" /> -->

	<!-- 静态资源访问，方案2 -->
	<!-- <mvc:default-servlet-handler/> -->


	<bean class="cn.gov.gzst.common.utils.SpringContextHolder" />
	<!-- 开启注解方案1 -->
	<!-- 注解方法处理 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" 
		/> -->
	<!-- 注解类映射处理 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"></bean> -->

	<!-- 开启注解方案2 -->
	<mvc:annotation-driven>
		<mvc:argument-resolvers>
			<bean class="cn.gov.gzst.common.query.resolver.QueryMethodArgumentResolver" />
			<bean class="cn.gov.gzst.common.query.resolver.PageableMethodArgumentResolver" />
			<bean class="cn.gov.gzst.common.query.resolver.FormModelMethodArgumentResolver" />
			<bean class="cn.gov.gzst.common.query.resolver.RequestJsonParamMethodArgumentResolver" />
			<bean class="cn.gov.gzst.common.query.resolver.PropertyPreFilterMethodArgumentResolver" />
		</mvc:argument-resolvers>


		<mvc:message-converters register-defaults="true">
			<!-- StringHttpMessageConverter编码为UTF-8，防止乱码 -->
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<constructor-arg value="UTF-8" />
				<property name="supportedMediaTypes">
					<list>
						<bean class="org.springframework.http.MediaType">
							<constructor-arg index="0" value="text" />
							<constructor-arg index="1" value="plain" />
							<constructor-arg index="2" value="UTF-8" />
						</bean>
						<bean class="org.springframework.http.MediaType">
							<constructor-arg index="0" value="*" />
							<constructor-arg index="1" value="*" />
							<constructor-arg index="2" value="UTF-8" />
						</bean>
					</list>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<!-- 类型转换及数据格式化 -->
	<bean id="conversionService"
		class="org.springframework.format.support.FormattingConversionServiceFactoryBean" />
	<!--设置查询字符串转换器的conversion service -->
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod"
			value="cn.gov.gzst.common.query.utils.QueryableConvertUtils.setConversionService" />
		<property name="arguments" ref="conversionService" />
	</bean>

	<!-- 视图解释类 -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="contentType" value="text/html" />
		<property name="prefix" value="/WEB-INF/webpage/"></property>
		<!--可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑 -->
		<property name="suffix" value=".jsp"></property>
	</bean>

	<!-- 拦截器 -->
	<mvc:interceptors>
		<!-- 国际化操作拦截器 如果采用基于（请求/Session/Cookie）则必需配置 -->
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />
		
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<!-- 需排除拦截的地址 -->
			<mvc:exclude-mapping path="/static/**" />
			<!-- 需排除拦截的地址 -->
			<mvc:exclude-mapping path="/upload/**" />
			<bean class="cn.gov.gzst.common.interceptor.EncodingInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>
	


	<!-- 控制器异常处理 -->
	<bean id="exceptionHandlerExceptionResolver"
		class="org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver">
	</bean>

	<!-- 国际化 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<!-- 国际化信息所在的文件名 -->
		<property name="basename" value="i18n/messages" />
		<!--多个目录的时候配置 -->
		<property name="basenames">
			<list>
				<value>i18n/messages</value>
				<value>i18n/ValidationMessages</value>
			</list>
		</property>
		<property name="useCodeAsDefaultMessage" value="false" />
		<property name="defaultEncoding" value="UTF-8" />
		<property name="cacheSeconds" value="60" />
	</bean>

	<!-- 支持上传文件 -->
	<!-- 配置MultipartResolver 用于文件上传 使用spring的CommosMultipartResolver -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
		p:defaultEncoding="UTF-8" p:maxUploadSize="${upload.max.size}" p:uploadTempDir="${upload.base.dir}/temp" />

	<!-- 以下 validator http://blog.csdn.net/xiaojiesu/article/details/50555714 
		在使用 mvc:annotation-driven 会 自动注册 -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->
		<property name="validationMessageSource" ref="messageSource" />
	</bean>
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver" />

	<!-- 计划任务后台管理 -->
	<bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" />
	<!--Bean初始化监听-->
	<bean class="cn.gov.gzst.common.listener.ApplicationContextListener" />
	<!-- JEEWEB完全启动回调 -->
	<bean class="cn.gov.gzst.common.listener.WebStartInitListener" />
</beans>